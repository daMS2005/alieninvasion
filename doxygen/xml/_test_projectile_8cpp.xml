<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="_test_projectile_8cpp" kind="file" language="C++">
    <compoundname>TestProjectile.cpp</compoundname>
    <includes local="no">gtest/gtest.h</includes>
    <includes refid="_projectile_8hpp" local="yes">Projectile.hpp</includes>
    <incdepgraph>
      <node id="3">
        <label>Projectile.hpp</label>
        <link refid="_projectile_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tests/TestProjectile.cpp</label>
        <link refid="_test_projectile_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>SFML/Graphics.hpp</label>
      </node>
      <node id="2">
        <label>gtest/gtest.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="_test_projectile_8cpp_1a3499c60dd7b818ebb2dd1aa00ab74210" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ProjectileTest, InitialPosition)</argsstring>
        <name>TEST</name>
        <param>
          <type>ProjectileTest</type>
        </param>
        <param>
          <type>InitialPosition</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/TestProjectile.cpp" line="4" column="1" bodyfile="tests/TestProjectile.cpp" bodystart="4" bodyend="8"/>
      </memberdef>
      <memberdef kind="function" id="_test_projectile_8cpp_1ad61f3279bdb48ed2abb158272ec8697b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ProjectileTest, Movement)</argsstring>
        <name>TEST</name>
        <param>
          <type>ProjectileTest</type>
        </param>
        <param>
          <type>Movement</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/TestProjectile.cpp" line="10" column="1" bodyfile="tests/TestProjectile.cpp" bodystart="10" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="_test_projectile_8cpp_1a8e1bc879442b223782ba178af4a2debc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ProjectileTest, OffScreenDetection)</argsstring>
        <name>TEST</name>
        <param>
          <type>ProjectileTest</type>
        </param>
        <param>
          <type>OffScreenDetection</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/TestProjectile.cpp" line="16" column="1" bodyfile="tests/TestProjectile.cpp" bodystart="16" bodyend="19"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Projectile.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal">TEST(ProjectileTest,<sp/>InitialPosition)<sp/>{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_projectile" kindref="compound">Projectile</ref><sp/>projectile({100.0f,<sp/>200.0f});</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(projectile.getBounds().top,<sp/>200.0f);<sp/></highlight><highlight class="comment">//<sp/>Correct<sp/>Y<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(projectile.getBounds().left,<sp/>100.0f);<sp/></highlight><highlight class="comment">//<sp/>Correct<sp/>X<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">TEST(ProjectileTest,<sp/>Movement)<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_projectile" kindref="compound">Projectile</ref><sp/>projectile({0.0f,<sp/>200.0f});</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>projectile.<ref refid="class_projectile_1a5bc646de87829b911d6817a6478c353e" kindref="member">update</ref>(0.016f);<sp/></highlight><highlight class="comment">//<sp/>Simulate<sp/>a<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_LT(projectile.getBounds().top,<sp/>200.0f);<sp/></highlight><highlight class="comment">//<sp/>Y<sp/>position<sp/>decreased</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">TEST(ProjectileTest,<sp/>OffScreenDetection)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_projectile" kindref="compound">Projectile</ref><sp/>projectile({0.0f,<sp/>-10.0f});</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(projectile.isOffScreen());<sp/></highlight><highlight class="comment">//<sp/>Projectile<sp/>is<sp/>off-screen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/TestProjectile.cpp"/>
  </compounddef>
</doxygen>
